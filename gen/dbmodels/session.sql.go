// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: session.sql

package dbmodels

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO session (
    player_id,
    session_key,
    session_address,
    session_expires_at
) VALUES (
    ?, ?, ?, ?
)
RETURNING session_id, player_id, session_key, session_address, session_expires_at
`

type CreateSessionParams struct {
	PlayerID         int64
	SessionKey       string
	SessionAddress   string
	SessionExpiresAt int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.PlayerID,
		arg.SessionKey,
		arg.SessionAddress,
		arg.SessionExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.PlayerID,
		&i.SessionKey,
		&i.SessionAddress,
		&i.SessionExpiresAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM session WHERE session_expires_at < ?
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context, sessionExpiresAt int64) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions, sessionExpiresAt)
	return err
}

const getSession = `-- name: GetSession :one
SELECT session_id, player_id, session_key, session_address, session_expires_at FROM session
WHERE session_id = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, sessionID int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, sessionID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.PlayerID,
		&i.SessionKey,
		&i.SessionAddress,
		&i.SessionExpiresAt,
	)
	return i, err
}

const getSessionByKey = `-- name: GetSessionByKey :one
SELECT session_id, player_id, session_key, session_address, session_expires_at FROM session
WHERE session_key = ? LIMIT 1
`

func (q *Queries) GetSessionByKey(ctx context.Context, sessionKey string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByKey, sessionKey)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.PlayerID,
		&i.SessionKey,
		&i.SessionAddress,
		&i.SessionExpiresAt,
	)
	return i, err
}

const getSessionsByPlayer = `-- name: GetSessionsByPlayer :many
SELECT session_id, player_id, session_key, session_address, session_expires_at FROM session
WHERE player_id = ?
`

func (q *Queries) GetSessionsByPlayer(ctx context.Context, playerID int64) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByPlayer, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.SessionID,
			&i.PlayerID,
			&i.SessionKey,
			&i.SessionAddress,
			&i.SessionExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionExpiry = `-- name: UpdateSessionExpiry :one
UPDATE session SET session_expires_at = ? WHERE session_id = ? RETURNING session_id, player_id, session_key, session_address, session_expires_at
`

type UpdateSessionExpiryParams struct {
	SessionExpiresAt int64
	SessionID        int64
}

func (q *Queries) UpdateSessionExpiry(ctx context.Context, arg UpdateSessionExpiryParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSessionExpiry, arg.SessionExpiresAt, arg.SessionID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.PlayerID,
		&i.SessionKey,
		&i.SessionAddress,
		&i.SessionExpiresAt,
	)
	return i, err
}
